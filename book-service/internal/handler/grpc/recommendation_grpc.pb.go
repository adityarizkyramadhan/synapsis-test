// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: proto/recommendation.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecommendationHandler_GetRecommendationUserByAuthor_FullMethodName   = "/grpc.RecommendationHandler/GetRecommendationUserByAuthor"
	RecommendationHandler_GetRecommendationUserByCategory_FullMethodName = "/grpc.RecommendationHandler/GetRecommendationUserByCategory"
	RecommendationHandler_GetRecommendationUserByTitle_FullMethodName    = "/grpc.RecommendationHandler/GetRecommendationUserByTitle"
)

// RecommendationHandlerClient is the client API for RecommendationHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendationHandlerClient interface {
	GetRecommendationUserByAuthor(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error)
	GetRecommendationUserByCategory(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error)
	GetRecommendationUserByTitle(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error)
}

type recommendationHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationHandlerClient(cc grpc.ClientConnInterface) RecommendationHandlerClient {
	return &recommendationHandlerClient{cc}
}

func (c *recommendationHandlerClient) GetRecommendationUserByAuthor(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, RecommendationHandler_GetRecommendationUserByAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationHandlerClient) GetRecommendationUserByCategory(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, RecommendationHandler_GetRecommendationUserByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationHandlerClient) GetRecommendationUserByTitle(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, RecommendationHandler_GetRecommendationUserByTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationHandlerServer is the server API for RecommendationHandler service.
// All implementations must embed UnimplementedRecommendationHandlerServer
// for forward compatibility.
type RecommendationHandlerServer interface {
	GetRecommendationUserByAuthor(context.Context, *GetRecommendationRequest) (*RecommendationResponse, error)
	GetRecommendationUserByCategory(context.Context, *GetRecommendationRequest) (*RecommendationResponse, error)
	GetRecommendationUserByTitle(context.Context, *GetRecommendationRequest) (*RecommendationResponse, error)
	mustEmbedUnimplementedRecommendationHandlerServer()
}

// UnimplementedRecommendationHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecommendationHandlerServer struct{}

func (UnimplementedRecommendationHandlerServer) GetRecommendationUserByAuthor(context.Context, *GetRecommendationRequest) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationUserByAuthor not implemented")
}
func (UnimplementedRecommendationHandlerServer) GetRecommendationUserByCategory(context.Context, *GetRecommendationRequest) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationUserByCategory not implemented")
}
func (UnimplementedRecommendationHandlerServer) GetRecommendationUserByTitle(context.Context, *GetRecommendationRequest) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationUserByTitle not implemented")
}
func (UnimplementedRecommendationHandlerServer) mustEmbedUnimplementedRecommendationHandlerServer() {}
func (UnimplementedRecommendationHandlerServer) testEmbeddedByValue()                               {}

// UnsafeRecommendationHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationHandlerServer will
// result in compilation errors.
type UnsafeRecommendationHandlerServer interface {
	mustEmbedUnimplementedRecommendationHandlerServer()
}

func RegisterRecommendationHandlerServer(s grpc.ServiceRegistrar, srv RecommendationHandlerServer) {
	// If the following call pancis, it indicates UnimplementedRecommendationHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecommendationHandler_ServiceDesc, srv)
}

func _RecommendationHandler_GetRecommendationUserByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationHandlerServer).GetRecommendationUserByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationHandler_GetRecommendationUserByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationHandlerServer).GetRecommendationUserByAuthor(ctx, req.(*GetRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationHandler_GetRecommendationUserByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationHandlerServer).GetRecommendationUserByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationHandler_GetRecommendationUserByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationHandlerServer).GetRecommendationUserByCategory(ctx, req.(*GetRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationHandler_GetRecommendationUserByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationHandlerServer).GetRecommendationUserByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationHandler_GetRecommendationUserByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationHandlerServer).GetRecommendationUserByTitle(ctx, req.(*GetRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendationHandler_ServiceDesc is the grpc.ServiceDesc for RecommendationHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendationHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.RecommendationHandler",
	HandlerType: (*RecommendationHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecommendationUserByAuthor",
			Handler:    _RecommendationHandler_GetRecommendationUserByAuthor_Handler,
		},
		{
			MethodName: "GetRecommendationUserByCategory",
			Handler:    _RecommendationHandler_GetRecommendationUserByCategory_Handler,
		},
		{
			MethodName: "GetRecommendationUserByTitle",
			Handler:    _RecommendationHandler_GetRecommendationUserByTitle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/recommendation.proto",
}
