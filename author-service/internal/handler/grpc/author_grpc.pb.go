// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: proto/author.proto

package author

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthorHandler_GetByID_FullMethodName = "/author.AuthorHandler/GetByID"
	AuthorHandler_Create_FullMethodName  = "/author.AuthorHandler/Create"
	AuthorHandler_Update_FullMethodName  = "/author.AuthorHandler/Update"
	AuthorHandler_Delete_FullMethodName  = "/author.AuthorHandler/Delete"
	AuthorHandler_ListAll_FullMethodName = "/author.AuthorHandler/ListAll"
)

// AuthorHandlerClient is the client API for AuthorHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorHandlerClient interface {
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Author, error)
	Create(ctx context.Context, in *Author, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *UpdateAuthorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteAuthorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuthorsResponse, error)
}

type authorHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorHandlerClient(cc grpc.ClientConnInterface) AuthorHandlerClient {
	return &authorHandlerClient{cc}
}

func (c *authorHandlerClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Author, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Author)
	err := c.cc.Invoke(ctx, AuthorHandler_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorHandlerClient) Create(ctx context.Context, in *Author, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthorHandler_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorHandlerClient) Update(ctx context.Context, in *UpdateAuthorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthorHandler_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorHandlerClient) Delete(ctx context.Context, in *DeleteAuthorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthorHandler_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorHandlerClient) ListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuthorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthorsResponse)
	err := c.cc.Invoke(ctx, AuthorHandler_ListAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorHandlerServer is the server API for AuthorHandler service.
// All implementations must embed UnimplementedAuthorHandlerServer
// for forward compatibility.
type AuthorHandlerServer interface {
	GetByID(context.Context, *GetByIDRequest) (*Author, error)
	Create(context.Context, *Author) (*emptypb.Empty, error)
	Update(context.Context, *UpdateAuthorRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteAuthorRequest) (*emptypb.Empty, error)
	ListAll(context.Context, *emptypb.Empty) (*ListAuthorsResponse, error)
	mustEmbedUnimplementedAuthorHandlerServer()
}

// UnimplementedAuthorHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorHandlerServer struct{}

func (UnimplementedAuthorHandlerServer) GetByID(context.Context, *GetByIDRequest) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedAuthorHandlerServer) Create(context.Context, *Author) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAuthorHandlerServer) Update(context.Context, *UpdateAuthorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAuthorHandlerServer) Delete(context.Context, *DeleteAuthorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAuthorHandlerServer) ListAll(context.Context, *emptypb.Empty) (*ListAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedAuthorHandlerServer) mustEmbedUnimplementedAuthorHandlerServer() {}
func (UnimplementedAuthorHandlerServer) testEmbeddedByValue()                       {}

// UnsafeAuthorHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorHandlerServer will
// result in compilation errors.
type UnsafeAuthorHandlerServer interface {
	mustEmbedUnimplementedAuthorHandlerServer()
}

func RegisterAuthorHandlerServer(s grpc.ServiceRegistrar, srv AuthorHandlerServer) {
	// If the following call pancis, it indicates UnimplementedAuthorHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorHandler_ServiceDesc, srv)
}

func _AuthorHandler_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorHandlerServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorHandler_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorHandlerServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorHandler_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorHandlerServer).Create(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorHandler_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorHandlerServer).Update(ctx, req.(*UpdateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorHandler_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorHandlerServer).Delete(ctx, req.(*DeleteAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorHandler_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorHandlerServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorHandler_ListAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorHandlerServer).ListAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorHandler_ServiceDesc is the grpc.ServiceDesc for AuthorHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "author.AuthorHandler",
	HandlerType: (*AuthorHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _AuthorHandler_GetByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AuthorHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AuthorHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AuthorHandler_Delete_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _AuthorHandler_ListAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/author.proto",
}
